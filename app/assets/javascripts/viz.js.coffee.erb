# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/


#######################################
#
# Global variables
#
#######################################

green_scale = d3.scale.linear().domain([0,1]).range(['grey', 'green'])
red_scale = d3.scale.linear().domain([0,1]).range(['grey', 'red'])
_scores = {}
_percentages = {}
_totals = {}
_max = 2012
_min = 2001
_index = 0
margins = {top: 20, right: 20, bottom: 20, left: 20}
width = 959
height = 593
pie_colors = {coal: "#000", pet_liquid: '#567880', pet_coke: '#624949', nat_gas: '#dee4fa', other_gases: '#81a3d0', nuclear: '#19d2b2', hydro: '#003b6f', other_renew: '#567880', wind: '#dee4fa', solar: '#feb718', wood: '#624949', geo: '#383838', biomass: '#8cb990', hydro_pumped: '#743466', other: '#9a679f'}
chart_group = undefined

#######################################
#
# Score calculation
#
#######################################

# uses electricity generation data to determine fill color
# saves a time series of green-ness scores to all _* hashes
calculate_scores = (state) ->
    state_data = gon.elec_data[state]
    scores = []
    totals = []
    _max = 0
    for k, v of state_data # k is the type of energy, v is energy time series data
        unless typeof v == typeof ""
            _max = v[0][0] if v[0][0] > _max
            for i in [0...v.length] by 1 # each pair is a year and a number of gigawatt hours
                gigawatts = parseFloat(v[i][1])
                if $.isNumeric(gigawatts)
                    if gigawatts < 0
                        # console.log("#{state} sank #{gigawatts} into #{k} in year #{_max - i}")
                    else
                        unless $.isNumeric(scores[i])
                            scores[i] = 0
                        unless $.isNumeric(totals[i])  
                            totals[i] = 0
                        toAdd = gon.green[k]*gigawatts
                        scores[i] += toAdd
                        totals[i] += gigawatts
    _scores[state] = scores
    _totals[state] = totals

calculate_percentages = (state) ->
    state_data = gon.elec_data[state]
    totals = _totals[state]
    percentages = {}
    for k, v of state_data
        unless typeof v == typeof ""
            percentage_series = []
            for i in [0...v.length] by 1
                percentage_series[i] = v[i][1]/totals[i]*100
            percentages[k] = percentage_series
    _percentages[state] = percentages

###########################################
#
# Slider stuff
#
###########################################

# what happens when someone changes a green-ness score
change_green_val = (type, value) ->
    $("##{type}").slider("value", value)
    $("##{type}_box").val(value)
    gon.green[type] = value
    for state in gon.state_abbrevs
        calculate_scores(state) 
        d3.select("##{state}").attr('fill', fill_color(state))

###########################################
#
# Visual functions
#
###########################################

fill_color = (state) ->
    scores = _scores[state]
    totals = _totals[state]
    if scores[_index] > 0
        color = green_scale(scores[_index]/totals[_index])
    else
        color = red_scale(-scores[_index]/totals[_index])
    return color

bring_to_top = (id_to_top) ->
    d3.selectAll('path').datum(-1)
    d3.select('#veil').datum(-2)
    d3.select("##{id_to_top}").datum(1)
    d3.selectAll('path').sort().order()
    d3.select('#MI-').attr('fill', fill_color("MI"))
    d3.select('#SP-').attr('fill', fill_color("MI"))

show_map = () ->
    d3.selectAll('rect').remove()
    d3.selectAll('.axis').remove()


###########################################
#
# Bar chart things
#
###########################################

get_chart_data = (state_id, absolute) ->
    labels = []
    numbers = []
    if absolute
        for type, series of gon.elec_data[state_id]
            labels[labels.length] = type
            numbers[numbers.length] = series[_index][1]
    else
        for type, series of _percentages[state_id]
            labels[labels.length] = type
            numbers[numbers.length] = series[_index]
    return [labels, numbers]

setup_chart = () ->
    # bring_to_top('veil')
    # d3.select('#veil')
        # .attr('opacity', .75)

    chart_group.append('rect')
        .attr('id', 'veil')
        .attr('width', '959')
        .attr('height', '593')
        .attr('fill', 'white')
        .attr('opacity', '0.75')

    # d3.select('#chart_group').append('div')
    #     .attr('class', 'tooltip')

    # d3.select("#chart_group").append('g')
        # .attr('class', 'x axis')
        # .attr("transform", "translate: 0, #{height - margin.bottom}")
        # .call(xAxis)

    # .append('text')
    #     .attr("transform", "translate: #{width - margins.left}, 0")
    #     .data('Close')
        # .attr('')

add_state = (state_id) ->
    console.log('add state')
    chart_group.append('g')
    .attr('id', "#{state_id}_bars")
    .attr('transform', "translate: #{width/2}, #{height/2}")

get_xScale = (numbers) ->
    console.log('get_xScale')
    d3.scale.linear().domain([0, d3.sum(numbers)]).range([0, width - margins['left'] - margins['right']])

add_bars = (state_id) ->
    console.log('add_bars')
    data = get_chart_data(state_id, false)
    labels = data[0]
    numbers = data[1]
    xScale = get_xScale(numbers)
    chart_group.append('g').call(
        d3.svg.axis()
        .scale(xScale)
        .orient('bottom')
    ).attr('class', 'axis')
        .attr('transform', "translate(#{margins['left']}, 0)")
    d3.select("##{state_id}_bars").selectAll('rect')
        .data(numbers)
        .enter()
        .append('rect')
            .attr('y', (d, i) ->
                20 * i + 2 * margins['top']
            )
            .attr('x', (d, i) ->
                margins['left']
            )
            .attr('height', 18)
            .attr('width', (d, i) ->
                xScale(d) or 0
            )
            .attr('fill', (d, i) ->
                pie_colors[labels[i]]
            )
            .attr('id', (d, i) ->
                labels[i] + "_bar"
            )
            # .on('mouseover', (d) ->
                # d3.select('.tooltip')
                    # .text(d)
                    # .style('left', "50px")
                    # .style('top', '50px')
            # )

#selects all of the rectangles in a group for a state then animates them to their new values
update_bars = () ->
    chart_group.selectAll('g').selectAll('rect')

# steps:
# 1) bring veil to front
# 2) add a group for the state, assign them data that will bring them to front (sort?)
# 3) add groups for each bar (make the attr the color the bar)
# 4) add rects to the above groups
make_chart = (state_id) ->
    console.log(state_id)
    console.log(chart_group)
    setup_chart()
    add_state(state_id)
    add_bars(state_id)
    

###########################################
#
# Setting up map
#
###########################################

$ ->
    chart_group = d3.select("#chart_group")

    for abbrev in gon.state_abbrevs
        calculate_scores(abbrev)
        calculate_percentages(abbrev)

    # setting up green-ness sliders
    for type, weight of gon.green
        $("##{type}").slider({
            animate: true,
            max: 10,
            min: -10,
            step: .1,
            orientation: "horizontal",
            value: weight,
            slide: (event, ui) ->
                change_green_val(ui.handle.parentElement.id, ui.value)
                show_map()
            })
        $("##{type}_box").on('change', (eventObject) ->
            change_green_val(this.id.slice(0, -4), this.value)
            )

    # setting up year slider
    $("#time").slider({
        animate: true,
        max: _max,
        min: _min,
        orientation: "horizontal",
        step: 1,
        value: _max,
        slide: (event, ui) ->
            $('#year').text("Year: #{ui.value}")
            _index = _max - ui.value
            update_bars()
            d3.select("##{state}").attr('fill', fill_color(state)) for state in gon.state_abbrevs
            show_map()
        })

    $('#year').text("Year: #{_max} (change with the slider below)")

    d3.selectAll('.state')
        .attr('fill', 'white')
        .attr('stroke', 'white')
        .attr('stroke-width', '0.75')
        .on('mouseover', () ->
            bring_to_top(this.id)
            d3.selectAll("##{this.id}")
                .attr('fill', fill_color(this.id))
                .transition().duration(200)
                    .attr('stroke', 'black')
                    .attr('stroke-width', '1.5')
        )
        .on('mouseleave', () ->
            d3.selectAll("##{this.id}")
                .attr('fill', fill_color(this.id))
                .transition().duration(200)
                    .attr('stroke', 'white')
                    .attr('stroke-width', '0.75')
        )
        .on('click', () ->
            make_chart(this.id)
        )
        .transition()
            .duration(500)
            .delay( (d,i) ->
                i * 40
            )
            .attr('fill', () ->
                abbrev = this.id
                fill_color(abbrev)
            )
