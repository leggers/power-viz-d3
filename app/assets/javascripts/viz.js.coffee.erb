# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/


#######################################
#
# Global variables
#
#######################################

green_scale = d3.scale.linear().domain([0,1]).range(['grey', 'green'])
red_scale = d3.scale.linear().domain([0,1]).range(['grey', 'red'])
_scores = {}
_percentages = {}
_totals = {}
_max = 2012
_min = 2001
_index = 0
margins = {top: 20, right: 20, bottom: 20, left: 20}
width = 959
height = 593
pie_colors = undefined
chart_group = undefined
tooltip = undefined
to_compare = []

#######################################
#
# Score calculation
#
#######################################

# uses electricity generation data to determine fill color
# saves a time series of green-ness scores to all _* hashes
calculate_scores = (state) ->
    state_data = gon.elec_data[state]
    scores = []
    totals = []
    _max = 0
    for k, v of state_data # k is the type of energy, v is energy time series data
        unless typeof v == typeof ""
            _max = v[0][0] if v[0][0] > _max
            for i in [0...v.length] by 1 # each pair is a year and a number of gigawatt hours
                gigawatts = parseFloat(v[i][1])
                if $.isNumeric(gigawatts)
                    if gigawatts < 0
                        # console.log("#{state} sank #{gigawatts} into #{k} in year #{_max - i}")
                    else
                        unless $.isNumeric(scores[i])
                            scores[i] = 0
                        unless $.isNumeric(totals[i])  
                            totals[i] = 0
                        toAdd = gon.green[k]*gigawatts
                        scores[i] += toAdd
                        totals[i] += gigawatts
    _scores[state] = scores
    _totals[state] = totals

calculate_percentages = (state) ->
    state_data = gon.elec_data[state]
    totals = _totals[state]
    percentages = {}
    for k, v of state_data
        unless typeof v == typeof ""
            percentage_series = []
            for i in [0...v.length] by 1
                percentage_series[i] = v[i][1]/totals[i]*100
            percentages[k] = percentage_series
    _percentages[state] = percentages

###########################################
#
# Slider stuff
#
###########################################

# what happens when someone changes a green-ness score
change_green_val = (type, value) ->
    $("##{type}").slider("value", value)
    $("##{type}_box").val(value)
    gon.green[type] = value
    for state in gon.state_abbrevs
        calculate_scores(state) 
        d3.select("##{state}").attr('fill', fill_color(state))

###########################################
#
# Visual functions (coloring, map manipulation, and tooltip)
#
###########################################

fill_color = (state) ->
    scores = _scores[state]
    totals = _totals[state]
    if scores[_index] > 0
        color = green_scale(scores[_index]/totals[_index])
    else
        color = red_scale(-scores[_index]/totals[_index])
    return color

bring_to_top = (id_to_top) ->
    d3.selectAll('path').datum(-1)
    d3.select("##{id_to_top}").datum(1)
    d3.selectAll('path').sort().order()
    d3.select('#MI-').attr('fill', fill_color("MI"))
    d3.select('#SP-').attr('fill', fill_color("MI"))

show_map = (comparing) ->
    d3.selectAll('#chart_group').selectAll('g').remove()
    d3.select('#chart_group').selectAll('rect').remove()
    d3.select('#close').remove()
    d3.select('#compare').remove()
    to_compare.length = 0 if not comparing

show_tooltip = () ->
    tooltip.transition()
        .duration(300)
        .style('opacity', 1)

tooltip_says = (text) ->
    tooltip
        .text(text)
        .style('left', "#{d3.event.pageX}px")
        .style('top', "#{d3.event.pageY}px")

hide_tooltip = () ->
    tooltip.transition()
        .duration(300)
        .style('opacity', 0)

setup_chart = () ->
    chart_group.append('rect')
        .attr('id', 'veil')
        .attr('width', width)
        .attr('height', height)
        .attr('fill', 'white')
        .attr('opacity', '0.75')

    chart_group.append('rect')
        .attr('id', 'top_stuff')
        .attr('width', width)
        .attr('height', 50)
        .attr('fill', 'white')
        .attr('opacity', 0.75)
    
    chart_group.append('text')
        .attr('id', 'close')
        .attr('x', 15)
        .attr('y', 45)
        .text("Close")
        .attr('font-size', '50px')
        .attr('id', 'close')
        .attr('fill', 'black')
        .attr('font-family', 'sans-serif')
        .on('click', () -> show_map(false))

    chart_group.append('text')
        .attr('id', 'compare')
        .attr('x', 15)
        .attr('y', height - 50)
        .text('Compare')
        .attr('font-size', '50px')
        .attr('id', 'compare')
        .attr('font-family', 'sans-serif')
        .on('click', () -> show_map(true))

###########################################
#
# Bar chart things
#
###########################################

get_chart_data = (state_id, absolute) ->
    labels = []
    numbers = []
    if absolute
        for type, series of gon.elec_data[state_id]
            labels[labels.length] = type
            to_append = series[_index][1]
            to_append = 0 unless to_append # gets rid of undefined's
            numbers[numbers.length] = to_append
    else
        for type, series of _percentages[state_id]
            labels[labels.length] = type
            numbers[numbers.length] = series[_index]
    console.log([labels, numbers])
    return [labels, numbers]

add_states = () ->
    chart_group.selectAll('g')
        .data(to_compare)
        .enter()
        .append('g')
            .attr('id', (d, i) ->
                d + "_bars"
            )

get_x_scale = (absolute) ->
    max = 0
    for state_id in to_compare
        sum = 0
        numbers = get_chart_data(state_id, absolute)[1]
        sum += Math.abs(num) for num in numbers
        max = sum if sum > max

    d3.scale.linear()
        .domain([0, max])
        .range([0, width - margins['left'] - margins['right']])

bar_position = (bar_id) ->
    num_bars = 1
    bar_num = 0
    for g in chart_group.selectAll('g')[0]
        if g.id
            bar_num = num_bars if g.id == bar_id
            num_bars += 1
    height * bar_num / num_bars

add_axis = (absolute) ->
    x_scale = get_x_scale(absolute)
    chart_group.append('g').call(
        d3.svg.axis()
            .scale(x_scale)
            .orient('bottom')
    )
        .attr('class', 'axis')
        .attr('transform', "translate(#{margins['left']}, 50)")
    x_scale

add_bars = () ->
    absolute = true
    x_scale = add_axis(absolute)
    for state_id in to_compare
        console.log("adding #{state_id}")
        data = get_chart_data(state_id, absolute)
        labels = data[0]
        numbers = data[1]
        d3.select("##{state_id}_bars").selectAll('rect')
            .data(numbers)
            .enter()
            .append('rect')
                .attr('id', (d, i) ->
                    "#{state_id}_#{labels[i]}_bar"
                )
                .attr('y', (d, i) ->
                    bar_position("#{state_id}_bars")
                )
                .attr('height', 18)
                .attr('width', (d, i) ->
                    x_scale(d) or 0
                )
                .attr('fill', (d, i) ->
                    pie_colors[labels[i]]
                )
                .attr('x', (d, i) ->
                    prev_bar = d3.select("##{this.id}").property('previousSibling')
                    if i > 0
                        prev_bar.width.baseVal.value + prev_bar.x.baseVal.value
                    else
                        margins['left']
                )
                .on('mouseover', show_tooltip)
                .on('mousemove', (d, i) ->
                    tooltip_says("#{labels[i]}: #{d}")
                )
                .on('mouseleave', hide_tooltip)

#selects all of the rectangles in a group for a state then animates them to their new values
update_bars = () ->
    # for id in to_compare
    0

# steps:
# 1) bring veil to front
# 2) add a group for the state, assign them data that will bring them to front (sort?)
# 3) add groups for each bar (make the attr the color the bar)
# 4) add rects to the above groups
make_chart = () ->
    console.log(to_compare)
    setup_chart()
    add_states()
    add_bars()

###########################################
#
# Setting up map
#
###########################################

$ ->
    chart_group = d3.select("#chart_group")
    width = d3.select('svg')[0][0].width.baseVal.value
    height = d3.select('svg')[0][0].height.baseVal.value
    pie_colors = gon.pie_colors

    for abbrev in gon.state_abbrevs
        calculate_scores(abbrev)
        calculate_percentages(abbrev)

    # setting up green-ness sliders
    for type, weight of gon.green
        $("##{type}").slider({
            animate: true,
            max: 10,
            min: -10,
            step: .1,
            orientation: "vertical",
            value: weight,
            slide: (event, ui) ->
                change_green_val(ui.handle.parentElement.id, ui.value)
            })
        $("##{type}_box").on('change', (eventObject) ->
            change_green_val(this.id.slice(0, -4), this.value)
            )

    # setting up year slider
    $("#time").slider({
        animate: true,
        max: _max,
        min: _min,
        orientation: "horizontal",
        step: 1,
        value: _max,
        slide: (event, ui) ->
            $('#year').text("Year: #{ui.value}")
            _index = _max - ui.value
            update_bars()
            d3.select("##{state}").attr('fill', fill_color(state)) for state in gon.state_abbrevs
        })

    $('#year').text("Year: #{_max} (change with the slider below)")

    d3.selectAll('.state')
        .attr('fill', 'white')
        .attr('stroke', 'white')
        .attr('stroke-width', '0.75')
        .on('mouseover', () ->
            bring_to_top(this.id)
            d3.selectAll("##{this.id}")
                .attr('fill', fill_color(this.id))
                .transition().duration(200)
                    .attr('stroke', 'black')
                    .attr('stroke-width', '1.5')
        )
        .on('mouseleave', () ->
            d3.selectAll("##{this.id}")
                .attr('fill', fill_color(this.id))
                .transition().duration(200)
                    .attr('stroke', 'white')
                    .attr('stroke-width', '0.75')
        )
        .on('click', () ->
            to_compare[to_compare.length] = this.id
            make_chart()
        )
        .transition()
            .duration(500)
            .delay( (d,i) ->
                i * 40
            )
            .attr('fill', () ->
                abbrev = this.id
                fill_color(abbrev)
            )

    tooltip = d3.select('body').append('div')
        .attr('class', 'tooltip')
        .style('opacity', 0)
