// Generated by CoffeeScript 1.6.2
var add_axis, add_bars, add_states, bar_position, bring_to_top, calculate_percentages, calculate_scores, change_green_val, chart_group, fill_color, get_chart_data, get_x_scale, green_scale, height, hide_tooltip, make_chart, margins, pie_colors, red_scale, setup_chart, show_map, show_tooltip, to_compare, tooltip, tooltip_says, update_bars, width, _index, _max, _min, _percentages, _scores, _totals;

green_scale = d3.scale.linear().domain([0, 1]).range(['grey', 'green']);

red_scale = d3.scale.linear().domain([0, 1]).range(['grey', 'red']);

_scores = {};

_percentages = {};

_totals = {};

_max = 2012;

_min = 2001;

_index = 0;

margins = {
  top: 20,
  right: 20,
  bottom: 20,
  left: 20
};

width = 959;

height = 593;

pie_colors = void 0;

chart_group = void 0;

tooltip = void 0;

to_compare = [];

calculate_scores = function(state) {
  var gigawatts, i, k, scores, state_data, toAdd, totals, v, _i, _ref;

  state_data = gon.elec_data[state];
  scores = [];
  totals = [];
  _max = 0;
  for (k in state_data) {
    v = state_data[k];
    if (typeof v !== typeof "") {
      if (v[0][0] > _max) {
        _max = v[0][0];
      }
      for (i = _i = 0, _ref = v.length; _i < _ref; i = _i += 1) {
        gigawatts = parseFloat(v[i][1]);
        if ($.isNumeric(gigawatts)) {
          if (gigawatts < 0) {

          } else {
            if (!$.isNumeric(scores[i])) {
              scores[i] = 0;
            }
            if (!$.isNumeric(totals[i])) {
              totals[i] = 0;
            }
            toAdd = gon.green[k] * gigawatts;
            scores[i] += toAdd;
            totals[i] += gigawatts;
          }
        }
      }
    }
  }
  _scores[state] = scores;
  return _totals[state] = totals;
};

calculate_percentages = function(state) {
  var i, k, percentage_series, percentages, state_data, totals, v, _i, _ref;

  state_data = gon.elec_data[state];
  totals = _totals[state];
  percentages = {};
  for (k in state_data) {
    v = state_data[k];
    if (typeof v !== typeof "") {
      percentage_series = [];
      for (i = _i = 0, _ref = v.length; _i < _ref; i = _i += 1) {
        percentage_series[i] = v[i][1] / totals[i] * 100;
      }
      percentages[k] = percentage_series;
    }
  }
  return _percentages[state] = percentages;
};

change_green_val = function(type, value) {
  var state, _i, _len, _ref, _results;

  $("#" + type).slider("value", value);
  $("#" + type + "_box").val(value);
  gon.green[type] = value;
  _ref = gon.state_abbrevs;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    state = _ref[_i];
    calculate_scores(state);
    _results.push(d3.select("#" + state).attr('fill', fill_color(state)));
  }
  return _results;
};

fill_color = function(state) {
  var color, scores, totals;

  scores = _scores[state];
  totals = _totals[state];
  if (scores[_index] > 0) {
    color = green_scale(scores[_index] / totals[_index]);
  } else {
    color = red_scale(-scores[_index] / totals[_index]);
  }
  return color;
};

bring_to_top = function(id_to_top) {
  d3.selectAll('path').datum(-1);
  d3.select("#" + id_to_top).datum(1);
  d3.selectAll('path').sort().order();
  d3.select('#MI-').attr('fill', fill_color("MI"));
  return d3.select('#SP-').attr('fill', fill_color("MI"));
};

show_map = function(comparing) {
  d3.selectAll('#chart_group').selectAll('g').remove();
  d3.select('#chart_group').selectAll('rect').remove();
  d3.select('#close').remove();
  d3.select('#compare').remove();
  if (!comparing) {
    return to_compare.length = 0;
  }
};

show_tooltip = function() {
  return tooltip.transition().duration(300).style('opacity', 1);
};

tooltip_says = function(text) {
  return tooltip.text(text).style('left', "" + d3.event.pageX + "px").style('top', "" + d3.event.pageY + "px");
};

hide_tooltip = function() {
  return tooltip.transition().duration(300).style('opacity', 0);
};

setup_chart = function() {
  chart_group.append('rect').attr('id', 'veil').attr('width', width).attr('height', height).attr('fill', 'white').attr('opacity', '0.75');
  chart_group.append('rect').attr('id', 'top_stuff').attr('width', width).attr('height', 50).attr('fill', 'white').attr('opacity', 0.75);
  chart_group.append('text').attr('id', 'close').attr('x', 15).attr('y', 45).text("Close").attr('font-size', '50px').attr('id', 'close').attr('fill', 'black').attr('font-family', 'sans-serif').on('click', function() {
    return show_map(false);
  });
  return chart_group.append('text').attr('id', 'compare').attr('x', 15).attr('y', height - 50).text('Compare').attr('font-size', '50px').attr('id', 'compare').attr('font-family', 'sans-serif').on('click', function() {
    return show_map(true);
  });
};

get_chart_data = function(state_id, absolute) {
  var labels, numbers, series, to_append, type, _ref, _ref1;

  labels = [];
  numbers = [];
  if (absolute) {
    _ref = gon.elec_data[state_id];
    for (type in _ref) {
      series = _ref[type];
      labels[labels.length] = type;
      to_append = series[_index][1];
      if (!to_append) {
        to_append = 0;
      }
      numbers[numbers.length] = to_append;
    }
  } else {
    _ref1 = _percentages[state_id];
    for (type in _ref1) {
      series = _ref1[type];
      labels[labels.length] = type;
      numbers[numbers.length] = series[_index];
    }
  }
  console.log([labels, numbers]);
  return [labels, numbers];
};

add_states = function() {
  return chart_group.selectAll('g').data(to_compare).enter().append('g').attr('id', function(d, i) {
    return d + "_bars";
  });
};

get_x_scale = function(absolute) {
  var max, num, numbers, state_id, sum, _i, _j, _len, _len1;

  max = 0;
  for (_i = 0, _len = to_compare.length; _i < _len; _i++) {
    state_id = to_compare[_i];
    sum = 0;
    numbers = get_chart_data(state_id, absolute)[1];
    for (_j = 0, _len1 = numbers.length; _j < _len1; _j++) {
      num = numbers[_j];
      sum += Math.abs(num);
    }
    if (sum > max) {
      max = sum;
    }
  }
  return d3.scale.linear().domain([0, max]).range([0, width - margins['left'] - margins['right']]);
};

bar_position = function(bar_id) {
  var bar_num, g, num_bars, _i, _len, _ref;

  num_bars = 1;
  bar_num = 0;
  _ref = chart_group.selectAll('g')[0];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    g = _ref[_i];
    if (g.id) {
      if (g.id === bar_id) {
        bar_num = num_bars;
      }
      num_bars += 1;
    }
  }
  return height * bar_num / num_bars;
};

add_axis = function(absolute) {
  var x_scale;

  x_scale = get_x_scale(absolute);
  chart_group.append('g').call(d3.svg.axis().scale(x_scale).orient('bottom')).attr('class', 'axis').attr('transform', "translate(" + margins['left'] + ", 50)");
  return x_scale;
};

add_bars = function() {
  var absolute, data, labels, numbers, state_id, x_scale, _i, _len, _results;

  absolute = true;
  x_scale = add_axis(absolute);
  _results = [];
  for (_i = 0, _len = to_compare.length; _i < _len; _i++) {
    state_id = to_compare[_i];
    console.log("adding " + state_id);
    data = get_chart_data(state_id, absolute);
    labels = data[0];
    numbers = data[1];
    _results.push(d3.select("#" + state_id + "_bars").selectAll('rect').data(numbers).enter().append('rect').attr('id', function(d, i) {
      return "" + state_id + "_" + labels[i] + "_bar";
    }).attr('y', function(d, i) {
      return bar_position("" + state_id + "_bars");
    }).attr('height', 18).attr('width', function(d, i) {
      return x_scale(d) || 0;
    }).attr('fill', function(d, i) {
      return pie_colors[labels[i]];
    }).attr('x', function(d, i) {
      var prev_bar;

      prev_bar = d3.select("#" + this.id).property('previousSibling');
      if (i > 0) {
        return prev_bar.width.baseVal.value + prev_bar.x.baseVal.value;
      } else {
        return margins['left'];
      }
    }).on('mouseover', show_tooltip).on('mousemove', function(d, i) {
      return tooltip_says("" + labels[i] + ": " + d);
    }).on('mouseleave', hide_tooltip));
  }
  return _results;
};

update_bars = function() {
  return 0;
};

make_chart = function() {
  console.log(to_compare);
  setup_chart();
  add_states();
  return add_bars();
};

$(function() {
  var abbrev, type, weight, _i, _len, _ref, _ref1;

  chart_group = d3.select("#chart_group");
  width = d3.select('svg')[0][0].width.baseVal.value;
  height = d3.select('svg')[0][0].height.baseVal.value;
  pie_colors = gon.pie_colors;
  _ref = gon.state_abbrevs;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    abbrev = _ref[_i];
    calculate_scores(abbrev);
    calculate_percentages(abbrev);
  }
  _ref1 = gon.green;
  for (type in _ref1) {
    weight = _ref1[type];
    $("#" + type).slider({
      animate: true,
      max: 10,
      min: -10,
      step: .1,
      orientation: "vertical",
      value: weight,
      slide: function(event, ui) {
        return change_green_val(ui.handle.parentElement.id, ui.value);
      }
    });
    $("#" + type + "_box").on('change', function(eventObject) {
      return change_green_val(this.id.slice(0, -4), this.value);
    });
  }
  $("#time").slider({
    animate: true,
    max: _max,
    min: _min,
    orientation: "horizontal",
    step: 1,
    value: _max,
    slide: function(event, ui) {
      var state, _j, _len1, _ref2, _results;

      $('#year').text("Year: " + ui.value);
      _index = _max - ui.value;
      update_bars();
      _ref2 = gon.state_abbrevs;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        state = _ref2[_j];
        _results.push(d3.select("#" + state).attr('fill', fill_color(state)));
      }
      return _results;
    }
  });
  $('#year').text("Year: " + _max + " (change with the slider below)");
  d3.selectAll('.state').attr('fill', 'white').attr('stroke', 'white').attr('stroke-width', '0.75').on('mouseover', function() {
    bring_to_top(this.id);
    return d3.selectAll("#" + this.id).attr('fill', fill_color(this.id)).transition().duration(200).attr('stroke', 'black').attr('stroke-width', '1.5');
  }).on('mouseleave', function() {
    return d3.selectAll("#" + this.id).attr('fill', fill_color(this.id)).transition().duration(200).attr('stroke', 'white').attr('stroke-width', '0.75');
  }).on('click', function() {
    to_compare[to_compare.length] = this.id;
    return make_chart();
  }).transition().duration(500).delay(function(d, i) {
    return i * 40;
  }).attr('fill', function() {
    abbrev = this.id;
    return fill_color(abbrev);
  });
  return tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);
});
